# Remember to set up the following secrets in your GitHub repository:
#    - GCP_PROJECT_ID: Your Google Cloud project ID
#    - GCP_WORKLOAD_IDENTITY_PROVIDER: The Workload Identity Provider (from Terraform output)
#    - GCP_SERVICE_ACCOUNT: The Service Account email (from Terraform output)

name: Deploy to Google Cloud Run

on:
  push:
    # This workflow will only run on the main branch
    # You could imagine having a staging branch that triggers a similar workflow to deploy to a staging environment
    # to test the deployment before promoting it to main
    branches: [main]
  # This allows you to manually trigger the workflow from the GitHub website
  # It is useful for example when you updated the Github Actions secrets but don't want to push a new commit
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE: your-service-name # TO_REPLACE: Replace with your Cloud Run service name
  REGION: your-region # TO_REPLACE: Replace with your desired region

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      - name: Run tests
        run: poetry run pytest app/tests.py

  deploy:
    # Remove this line when ready to deploy
    if: false
    # This job will only run if the test job passes
    needs: test
    runs-on: ubuntu-latest

    # Those permissions for the Google Auth step
    permissions:
      contents: "read"
      id-token: "write"

    # The job will be killed automatically if it takes more than 5 minutes
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Authenticate with Google Cloud using Workload Identity
      # There are other ways to authenticate, but this is the most secure way
      # Most of the `main.tf` file is dedicated to create the GCP resources for this step
      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          token_format: access_token
          project_id: ${{ env.PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # We need to login to the Google Container Registry to push the image
      - name: Login to GCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          # The image name is of the form <region>-docker.pkg.dev/<project-id>/<service-name>:<commit-sha>
          tags: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}

      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}
